local workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local camera = workspace.CurrentCamera
local RunService = game:GetService("RunService")

-- Settings
local Box_Color = Color3.fromRGB(3, 143, 254)
local Box_Thickness = 2
local Box_Transparency = 1

local Tracers = false
local Tracer_Color = Color3.fromRGB(255, 0, 0)
local Tracer_Thickness = 2
local Tracer_Transparency = 1

local Shifter_Color = Color3.fromRGB(0, 255, 0)

local Autothickness = true
local Team_Check = false
local red = Color3.fromRGB(240, 20, 20)
local green = Color3.fromRGB(90, 215, 25)

local connections = {}
local drawings = {}

local function Lerp(a, b, t)
    return a + (b - a) * t
end

local function NewLine()
    local line = Drawing.new("Line")
    line.Visible = false
    line.From = Vector2.new(0, 0)
    line.To = Vector2.new(1, 1)
    line.Color = Box_Color
    line.Thickness = Box_Thickness
    line.Transparency = Box_Transparency
    return line
end

local function createESPForPlayer(v)
    if v == player then return end

    local lines = {
        line1 = NewLine(), line2 = NewLine(), line3 = NewLine(), line4 = NewLine(),
        line5 = NewLine(), line6 = NewLine(), line7 = NewLine(), line8 = NewLine(),
        line9 = NewLine(), line10 = NewLine(), line11 = NewLine(), line12 = NewLine(),
        Tracer = NewLine()
    }

    lines.Tracer.Color = Tracer_Color
    lines.Tracer.Thickness = Tracer_Thickness
    lines.Tracer.Transparency = Tracer_Transparency

    local Shifter = Drawing.new("Quad")
    Shifter.Visible = false
    Shifter.Color = Shifter_Color
    Shifter.Thickness = Box_Thickness
    Shifter.Filled = false
    Shifter.Transparency = Box_Transparency

    local debounce = 0
    local shifteroffset = 0

    local connection
    connection = RunService.RenderStepped:Connect(function()
        local char = v.Character
        if char and char:FindFirstChild("Humanoid") and char:FindFirstChild("HumanoidRootPart") and char:FindFirstChild("Head") and char.Humanoid.Health > 0 then
            local pos, vis = camera:WorldToViewportPoint(char.HumanoidRootPart.Position)
            if vis then
                local Scale = char.Head.Size.Y / 2
                local Size = Vector3.new(2, 3, 1.5) * (Scale * 2)

                local function wp(offset)
                    return camera:WorldToViewportPoint((char.HumanoidRootPart.CFrame * offset).Position)
                end

                local Top1, Top2, Top3, Top4 = wp(CFrame.new(-Size.X, Size.Y, -Size.Z)), wp(CFrame.new(-Size.X, Size.Y, Size.Z)), wp(CFrame.new(Size.X, Size.Y, Size.Z)), wp(CFrame.new(Size.X, Size.Y, -Size.Z))
                local Bottom1, Bottom2, Bottom3, Bottom4 = wp(CFrame.new(-Size.X, -Size.Y, -Size.Z)), wp(CFrame.new(-Size.X, -Size.Y, Size.Z)), wp(CFrame.new(Size.X, -Size.Y, Size.Z)), wp(CFrame.new(Size.X, -Size.Y, -Size.Z))

                lines.line1.From, lines.line1.To = Vector2.new(Top1.X, Top1.Y), Vector2.new(Top2.X, Top2.Y)
                lines.line2.From, lines.line2.To = Vector2.new(Top2.X, Top2.Y), Vector2.new(Top3.X, Top3.Y)
                lines.line3.From, lines.line3.To = Vector2.new(Top3.X, Top3.Y), Vector2.new(Top4.X, Top4.Y)
                lines.line4.From, lines.line4.To = Vector2.new(Top4.X, Top4.Y), Vector2.new(Top1.X, Top1.Y)

                lines.line5.From, lines.line5.To = Vector2.new(Bottom1.X, Bottom1.Y), Vector2.new(Bottom2.X, Bottom2.Y)
                lines.line6.From, lines.line6.To = Vector2.new(Bottom2.X, Bottom2.Y), Vector2.new(Bottom3.X, Bottom3.Y)
                lines.line7.From, lines.line7.To = Vector2.new(Bottom3.X, Bottom3.Y), Vector2.new(Bottom4.X, Bottom4.Y)
                lines.line8.From, lines.line8.To = Vector2.new(Bottom4.X, Bottom4.Y), Vector2.new(Bottom1.X, Bottom1.Y)

                lines.line9.From, lines.line9.To = Vector2.new(Bottom1.X, Bottom1.Y), Vector2.new(Top1.X, Top1.Y)
                lines.line10.From, lines.line10.To = Vector2.new(Bottom2.X, Bottom2.Y), Vector2.new(Top2.X, Top2.Y)
                lines.line11.From, lines.line11.To = Vector2.new(Bottom3.X, Bottom3.Y), Vector2.new(Top3.X, Top3.Y)
                lines.line12.From, lines.line12.To = Vector2.new(Bottom4.X, Bottom4.Y), Vector2.new(Top4.X, Top4.Y)

                if Tracers then
                    local trace = wp(CFrame.new(0, -Size.Y, 0))
                    lines.Tracer.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y)
                    lines.Tracer.To = Vector2.new(trace.X, trace.Y)
                end

                if Team_Check then
                    local color = (v.TeamColor == player.TeamColor) and green or red
                    for _, x in pairs(lines) do x.Color = color end
                    Shifter.Color = (color == green) and red or green
                end

                if debounce == 0 then
                    debounce = debounce + 1
                    coroutine.wrap(function()
                        for i = 0, Size.Y, 0.1 do shifteroffset = Lerp(shifteroffset, i, 0.5) wait() end
                        for i = shifteroffset, 0, -0.1 do shifteroffset = Lerp(shifteroffset, i, 0.5) wait() end
                        for i = 0, -Size.Y, -0.1 do shifteroffset = Lerp(shifteroffset, i, 0.5) wait() end
                        for i = shifteroffset, 0, 0.1 do shifteroffset = Lerp(shifteroffset, i, 0.5) wait() end
                        debounce = 0
                    end)()
                end

                local s1, s2, s3, s4 = wp(CFrame.new(-Size.X, shifteroffset, -Size.Z)), wp(CFrame.new(-Size.X, shifteroffset, Size.Z)), wp(CFrame.new(Size.X, shifteroffset, Size.Z)), wp(CFrame.new(Size.X, shifteroffset, -Size.Z))
                Shifter.PointA, Shifter.PointB, Shifter.PointC, Shifter.PointD = Vector2.new(s1.X, s1.Y), Vector2.new(s2.X, s2.Y), Vector2.new(s3.X, s3.Y), Vector2.new(s4.X, s4.Y)

                local thickness = Autothickness and math.clamp(1 / (player.Character.HumanoidRootPart.Position - char.HumanoidRootPart.Position).Magnitude * 100, 0.1, 4) or Box_Thickness
                for _, x in pairs(lines) do x.Thickness = thickness end
                Shifter.Thickness = thickness

                for _, x in pairs(lines) do x.Visible = true end
                Shifter.Visible = true
            else
                for _, x in pairs(lines) do x.Visible = false end
                Shifter.Visible = false
            end
        else
            for _, x in pairs(lines) do x.Visible = false end
            Shifter.Visible = false
                            if game.Players:FindFirstChild(newplr.Name) == nil then
                    connection:Disconnect()
                end
            end
        end)
    end

    coroutine.wrap(ESP)()
    table.insert(connections, connection)
    table.insert(drawings, lines)
    table.insert(drawings, Shifter)
end
